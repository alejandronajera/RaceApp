/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.aptecic.racecalendar;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Manuel G. Najera (najera_manuel_g@cat.com)
 */
public class CalendarGenerator extends javax.swing.JInternalFrame {

    HashMap<Integer, String> cmbKeyIndex = new HashMap<>();

    /**
     * Creates new form CalendarGenerator
     */
    public CalendarGenerator() {
        initComponents();
        fillComboBoxFromDB();
        //TODO: Change DateTime Picker to pop up
        spnStartDate.setValue(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        panInput = new javax.swing.JPanel();
        lblStartDate = new javax.swing.JLabel();
        lblRaceType = new javax.swing.JLabel();
        spnStartDate = new javax.swing.JSpinner();
        cmbRaceType = new javax.swing.JComboBox();
        btnToday = new javax.swing.JButton();
        lblRacePace = new javax.swing.JLabel();
        lblRacePaceMin = new javax.swing.JLabel();
        lblRacePaceSeg = new javax.swing.JLabel();
        lblRacePaceMi = new javax.swing.JLabel();
        spnRacePaceMin = new javax.swing.JSpinner();
        spnRacePaceSeg = new javax.swing.JSpinner();

        setClosable(true);
        setTitle("Training Calendar Generator");

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        panInput.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblStartDate.setLabelFor(spnStartDate);
        lblStartDate.setText("Start Date:");

        lblRaceType.setLabelFor(cmbRaceType);
        lblRaceType.setText("Race Type:");

        spnStartDate.setModel(new javax.swing.SpinnerDateModel());
        spnStartDate.setToolTipText("");
        spnStartDate.setEditor(new javax.swing.JSpinner.DateEditor(spnStartDate, "MM/dd/yyyy"));

        cmbRaceType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnToday.setText("Now");
        btnToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodayActionPerformed(evt);
            }
        });

        lblRacePace.setText("Race Pace:");

        lblRacePaceMin.setText("min");

        lblRacePaceSeg.setText("seg");

        lblRacePaceMi.setText("/ mi");

        spnRacePaceMin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        spnRacePaceSeg.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        javax.swing.GroupLayout panInputLayout = new javax.swing.GroupLayout(panInput);
        panInput.setLayout(panInputLayout);
        panInputLayout.setHorizontalGroup(
            panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRacePace)
                    .addComponent(lblRaceType)
                    .addComponent(lblStartDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbRaceType, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panInputLayout.createSequentialGroup()
                        .addComponent(spnStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnToday))
                    .addGroup(panInputLayout.createSequentialGroup()
                        .addComponent(spnRacePaceMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRacePaceMin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnRacePaceSeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRacePaceSeg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRacePaceMi)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        panInputLayout.setVerticalGroup(
            panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnToday, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRaceType)
                    .addComponent(cmbRaceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRacePace, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRacePaceMin, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRacePaceSeg, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRacePaceMi, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnRacePaceMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnRacePaceSeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnGenerate))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        String driver = "org.apache.derby.jdbc.ClientDriver";
        String serverName = "localhost";
        String databaseName = "racedb";
        String user = "race";
        String password = "race";
        String url;
        Connection connection;
        String sql;
        Statement stmt;
        ResultSet rs;
        Writer writer = null;

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setFileFilter(new FileNameExtensionFilter("iCalendar File", "ics"));
        int intOption = fileChooser.showSaveDialog(null);

        if (intOption == JFileChooser.APPROVE_OPTION) {
            url = "jdbc:derby://" + serverName + ":1527/" + databaseName;

            //Load JDBC Driver
            try {
                Class.forName(driver);
            } catch (ClassNotFoundException e) {
                System.err.println("Error: driver not found.");
                return;
            }

            //Connect to DB
            try {
                connection = DriverManager.getConnection(url, user, password);
            } catch (SQLException e) {
                System.err.println("Error: Unable to connect.");
                return;
            }

            //Read Table
            try {
                sql = "select * from race_wk_sched_det where rwsd_key = " + 
                        cmbKeyIndex.get(cmbRaceType.getSelectedIndex()) + 
                        " order by rwsd_seq";
                stmt = connection.createStatement();
                rs = stmt.executeQuery(sql);
            } catch (SQLException e) {
                System.err.println("Error: Unable to query table.");
                return;
            }

            //Read data values
            try {
                writer = new BufferedWriter(new OutputStreamWriter(
                        new FileOutputStream(fileChooser.getSelectedFile()), "UTF-8"));

                //Calendar Header
                writer.write("BEGIN:VCALENDAR\r\n");
                writer.write("VERSION:2.0\r\n");
                writer.write("PRODID:-//Alejandro Najera//org.aptecic.racecalendar.RaceApp//EN\r\n");
                writer.write("METHOD:PUBLISH\r\n");
                writer.write("X-WR-CALNAME:Training Schedule\r\n");
                writer.write("CALSCALE:GREGORIAN\r\n");
                writer.write("\r\n");

                //Calendar Time Zone
                writer.write("BEGIN:VTIMEZONE\r\n");
                writer.write("TZID:America/Chicago\r\n");
                writer.write("TZURL:http://tzurl.org/zoneinfo-outlook/America/Chicago\r\n");
                writer.write("X-LIC-LOCATION:America/Chicago\r\n");
                writer.write("BEGIN:DAYLIGHT\r\n");
                writer.write("TZOFFSETFROM:-0600\r\n");
                writer.write("TZOFFSETTO:-0500\r\n");
                writer.write("TZNAME:CDT\r\n");
                writer.write("DTSTART:19700308T020000\r\n");
                writer.write("RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\n");
                writer.write("END:DAYLIGHT\r\n");
                writer.write("BEGIN:STANDARD\r\n");
                writer.write("TZOFFSETFROM:-0500\r\n");
                writer.write("TZOFFSETTO:-0600\r\n");
                writer.write("TZNAME:CST\r\n");
                writer.write("DTSTART:19701101T020000\r\n");
                writer.write("RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\n");
                writer.write("END:STANDARD\r\n");
                writer.write("END:VTIMEZONE\r\n");
                writer.write("\r\n");

                //Calendar Events                        
                while (rs.next()) {
                    writer.write("BEGIN:VEVENT\r\n");
                    //When was created
                    writer.write("DTSTAMP:" + getCurrentDate() + "\r\n");
                    //UID = Date + GMT Time + WRK + Sequence
                    writer.write("UID:" + getCurrentDate() + "-WRK" + 
                            String.format("%03d", rs.getInt(2)) + 
                            "@org.aptecic.racecalendar.RaceApp\r\n");
                    //Distance
                    writer.write("SUMMARY:" + rs.getString(5) + " mi - " + rs.getString(4) + "\r\n");
                    writer.write("STATUS:CONFIRMED\r\n");
                    //Start Date + Days
                    writer.write("DTSTART;VALUE=DATE:" + 
                            getStartDate((Date) spnStartDate.getValue(), rs.getInt(3)) + "\r\n");
                    //Start Date + Days
                    writer.write("DTEND;VALUE=DATE:" + 
                            getEndDate((Date) spnStartDate.getValue(), rs.getInt(3)) + "\r\n");
                    //When was created
                    writer.write("LAST-MODIFIED:" + getCurrentDate() + "\r\n");
                    //What surface to run at
                    writer.write("LOCATION:" + rs.getString(7) + "\r\n");
                    //TODO: Calculate pace for easy runs.
                    writer.write("DESCRIPTION:" + 
                            "Workout Type: " + rs.getString(4) + " \\n" +
                            "Distance: " + rs.getString(5) + " mi \\n" +
                            "Pace: " + spnRacePaceMin.getValue() + ":" + String.format("%02d", spnRacePaceSeg.getValue()) + " min/mi \\n" +
                            "Notes: " + rs.getString(6) + "\r\n");
                    writer.write("PRIORITY:0\r\n");
                    writer.write("BEGIN:VALARM\r\n");
                    writer.write("ACTION:DISPLAY\r\n");
                    //Distance
                    writer.write("DESCRIPTION:" + rs.getString(5) + " mi - " + rs.getString(4) + "\r\n");
                    writer.write("TRIGGER:-PT240M\r\n");
                    writer.write("END:VALARM\r\n");
                    writer.write("END:VEVENT\r\n");
                    writer.write("\r\n");
                }

                //Calendar Footer
                writer.write("END:VCALENDAR\r\n");
                
                rs.close();
                stmt.close();
                connection.close();
            } catch (SQLException e) {
                System.err.println("Error: Unable to read table data.");
                return;
            } catch (IOException e) {
                System.err.println(e.getStackTrace());
            } finally {
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(CalendarGenerator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodayActionPerformed
        spnStartDate.setValue(new Date());
    }//GEN-LAST:event_btnTodayActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnToday;
    private javax.swing.JComboBox cmbRaceType;
    private javax.swing.JLabel lblRacePace;
    private javax.swing.JLabel lblRacePaceMi;
    private javax.swing.JLabel lblRacePaceMin;
    private javax.swing.JLabel lblRacePaceSeg;
    private javax.swing.JLabel lblRaceType;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JPanel panInput;
    private javax.swing.JSpinner spnRacePaceMin;
    private javax.swing.JSpinner spnRacePaceSeg;
    private javax.swing.JSpinner spnStartDate;
    // End of variables declaration//GEN-END:variables

    private void fillComboBoxFromDB() {
        String driver = "org.apache.derby.jdbc.ClientDriver";
        String serverName = "localhost";
        String databaseName = "racedb";
        String user = "race";
        String password = "race";
        String url;
        Connection connection;
        String sql;
        Statement stmt;
        ResultSet rs;

        url = "jdbc:derby://" + serverName + ":1527/" + databaseName;

        //Load JDBC Driver
        try {
            Class.forName(driver);
        } catch (ClassNotFoundException e) {
            System.err.println("Error: driver not found.");
            return;
        }

        //Connect to DB
        try {
            connection = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            System.err.println("Error: Unable to connect.");
            return;
        }

        //Read Table
        try {
            sql = "select rws_key, rws_name from race_wk_sched_mstr";
            stmt = connection.createStatement();
            rs = stmt.executeQuery(sql);
        } catch (SQLException e) {
            System.err.println("Error: Unable to query table.");
            return;
        }

        //Read data values
        try {
            int x = 0;

            cmbRaceType.removeAllItems();
            while (rs.next()) {
                cmbKeyIndex.put(x, rs.getString(1));
                cmbRaceType.addItem(rs.getString(2));

                x++;
            }

            rs.close();
            stmt.close();
            connection.close();
        } catch (SQLException e) {
            System.err.println("Error: Unable to read table data.");
            return;
        }
    }

    private String getCurrentDate() {
        SimpleDateFormat dateFormatGmtD = new SimpleDateFormat("yyyyMMdd");
        SimpleDateFormat dateFormatGmtT = new SimpleDateFormat("HHmmss");
        
        dateFormatGmtD.setTimeZone(TimeZone.getTimeZone("GMT"));
        dateFormatGmtT.setTimeZone(TimeZone.getTimeZone("GMT"));
        
        return dateFormatGmtD.format(new Date()) + "T" + dateFormatGmtT.format(new Date()) + "Z";
    }

    private String getStartDate(Date startDate, Integer addDays) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        
        Calendar calendar = Calendar.getInstance();
        
        calendar.setTime(startDate); // Now use today date.
        calendar.add(Calendar.DATE, addDays); // Adding 5 days
        
        return dateFormat.format(calendar.getTime());
    }

    private String getEndDate(Date endDate, Integer addDays) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        
        Calendar calendar = Calendar.getInstance();
        
        calendar.setTime(endDate); // Now use today date.
        calendar.add(Calendar.DATE, addDays); // Adding 5 days
        
        return dateFormat.format(calendar.getTime());
    }
}
